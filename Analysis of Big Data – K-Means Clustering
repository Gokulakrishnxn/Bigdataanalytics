import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score
from scipy.spatial.distance import cdist
import warnings
warnings.filterwarnings('ignore')

# Set visualization style
sns.set_style("whitegrid")
plt.rcParams['figure.facecolor'] = 'white'

print("=" * 100)
print("K-MEANS CLUSTERING ANALYSIS - CUSTOMER SEGMENTATION FOR BIG DATA")
print("=" * 100)

# Generate realistic customer dataset (simulating Mall Customer Segmentation Data)
np.random.seed(42)

n_customers = 200

# Create distinct customer segments for realistic clustering
segments = {
    'Low Income - Low Spending': {'income': (15, 40), 'spending': (1, 40), 'age': (18, 70), 'size': 40},
    'Low Income - High Spending': {'income': (15, 40), 'spending': (60, 99), 'age': (18, 35), 'size': 30},
    'High Income - Low Spending': {'income': (70, 120), 'spending': (1, 40), 'age': (35, 70), 'size': 35},
    'High Income - High Spending': {'income': (70, 120), 'spending': (60, 99), 'age': (25, 45), 'size': 40},
    'Medium Income - Medium Spending': {'income': (40, 70), 'spending': (40, 60), 'age': (25, 60), 'size': 55}
}

customers_data = []
customer_id = 1

for segment_name, params in segments.items():
    for _ in range(params['size']):
        income = np.random.uniform(params['income'][0], params['income'][1])
        spending = np.random.uniform(params['spending'][0], params['spending'][1])
        age = int(np.random.uniform(params['age'][0], params['age'][1]))
        gender = np.random.choice(['Male', 'Female'])
        
        customers_data.append({
            'CustomerID': customer_id,
            'Gender': gender,
            'Age': age,
            'Annual_Income': round(income, 2),
            'Spending_Score': int(spending)
        })
        customer_id += 1

df = pd.DataFrame(customers_data)

print("\n1. DATASET OVERVIEW")
print("-" * 100)
print(f"Total Customers: {len(df)}")
print(f"Features: {df.shape[1]}")
print(f"Gender Distribution: Male={len(df[df['Gender']=='Male'])}, Female={len(df[df['Gender']=='Female'])}")
print(f"\nFirst 10 Records:")
print(df.head(10).to_string())

print("\n2. STATISTICAL SUMMARY")
print("-" * 100)
print(df.describe().to_string())

# Data Preprocessing
print("\n3. DATA PREPROCESSING")
print("-" * 100)

# Select features for clustering
features_for_clustering = ['Age', 'Annual_Income', 'Spending_Score']
X = df[features_for_clustering].values

print(f"Features selected for clustering: {features_for_clustering}")
print(f"Data shape: {X.shape}")
print(f"Missing values: {df[features_for_clustering].isnull().sum().sum()}")

# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print(f"\nData standardized using StandardScaler")
print(f"Mean after scaling: {X_scaled.mean(axis=0).round(4)}")
print(f"Std after scaling: {X_scaled.std(axis=0).round(4)}")

# ==================== ELBOW METHOD ====================
print("\n4. OPTIMAL CLUSTER DETERMINATION - ELBOW METHOD")
print("-" * 100)

inertias = []
K_range = range(2, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    inertias.append(kmeans.inertia_)

print("Within-Cluster Sum of Squares (WCSS) for different K values:")
for k, inertia in zip(K_range, inertias):
    print(f"  K={k}: WCSS={inertia:.2f}")

# ==================== SILHOUETTE ANALYSIS ====================
print("\n5. SILHOUETTE ANALYSIS")
print("-" * 100)

silhouette_scores = []
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X_scaled)
    score = silhouette_score(X_scaled, labels)
    silhouette_scores.append(score)
    print(f"  K={k}: Silhouette Score={score:.4f}")

optimal_k = K_range[np.argmax(silhouette_scores)]
print(f"\nOptimal number of clusters (highest silhouette): K={optimal_k}")

# ==================== FINAL K-MEANS CLUSTERING ====================
print("\n6. FINAL K-MEANS CLUSTERING WITH K=5")
print("-" * 100)

final_k = 5
kmeans_final = KMeans(n_clusters=final_k, random_state=42, n_init=10, max_iter=300)
df['Cluster'] = kmeans_final.fit_predict(X_scaled)

print(f"Clustering completed with {final_k} clusters")
print(f"Iterations to converge: {kmeans_final.n_iter_}")
print(f"Final inertia: {kmeans_final.inertia_:.2f}")

# Cluster Centers (in original scale)
cluster_centers_original = scaler.inverse_transform(kmeans_final.cluster_centers_)
centers_df = pd.DataFrame(cluster_centers_original, columns=features_for_clustering)
centers_df['Cluster'] = range(final_k)

print("\nCluster Centers (Original Scale):")
print(centers_df.to_string(index=False))

# ==================== CLUSTER ANALYSIS ====================
print("\n7. CLUSTER CHARACTERISTICS")
print("-" * 100)

cluster_summary = df.groupby('Cluster').agg({
    'Age': ['mean', 'min', 'max'],
    'Annual_Income': ['mean', 'min', 'max'],
    'Spending_Score': ['mean', 'min', 'max'],
    'CustomerID': 'count'
})

cluster_summary.columns = ['_'.join(col).strip() for col in cluster_summary.columns.values]
cluster_summary = cluster_summary.rename(columns={'CustomerID_count': 'Customer_Count'})

print(cluster_summary.to_string())

# Cluster Labels
cluster_labels = []
for i in range(final_k):
    cluster_data = df[df['Cluster'] == i]
    avg_income = cluster_data['Annual_Income'].mean()
    avg_spending = cluster_data['Spending_Score'].mean()
    
    if avg_income < 50 and avg_spending < 50:
        label = "Budget Conscious"
    elif avg_income < 50 and avg_spending >= 50:
        label = "Spenders - Low Income"
    elif avg_income >= 50 and avg_spending < 50:
        label = "High Earners - Conservative"
    elif avg_income >= 50 and avg_spending >= 50:
        label = "Premium Customers"
    else:
        label = "Moderate Segment"
    
    cluster_labels.append(label)

print("\n8. CLUSTER BUSINESS LABELS")
print("-" * 100)
for i, label in enumerate(cluster_labels):
    count = len(df[df['Cluster'] == i])
    percentage = (count / len(df)) * 100
    print(f"Cluster {i}: {label} ({count} customers, {percentage:.1f}%)")

# ==================== CLUSTER EVALUATION METRICS ====================
print("\n9. CLUSTERING QUALITY METRICS")
print("-" * 100)

silhouette = silhouette_score(X_scaled, df['Cluster'])
davies_bouldin = davies_bouldin_score(X_scaled, df['Cluster'])
calinski_harabasz = calinski_harabasz_score(X_scaled, df['Cluster'])

print(f"Silhouette Score: {silhouette:.4f} (Range: -1 to 1, Higher is better)")
print(f"Davies-Bouldin Index: {davies_bouldin:.4f} (Lower is better)")
print(f"Calinski-Harabasz Score: {calinski_harabasz:.2f} (Higher is better)")

# ==================== PCA FOR VISUALIZATION ====================
print("\n10. DIMENSIONALITY REDUCTION - PCA")
print("-" * 100)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

print(f"Original dimensions: {X_scaled.shape[1]}")
print(f"Reduced dimensions: {X_pca.shape[1]}")
print(f"Explained variance ratio: {pca.explained_variance_ratio_}")
print(f"Total variance explained: {pca.explained_variance_ratio_.sum()*100:.2f}%")

df['PCA1'] = X_pca[:, 0]
df['PCA2'] = X_pca[:, 1]

# ==================== COMPREHENSIVE VISUALIZATIONS ====================
fig = plt.figure(figsize=(20, 16))

# Plot 1: Elbow Method
ax1 = plt.subplot(3, 3, 1)
ax1.plot(K_range, inertias, 'bo-', linewidth=2, markersize=8)
ax1.set_xlabel('Number of Clusters (K)', fontsize=10)
ax1.set_ylabel('Within-Cluster Sum of Squares (WCSS)', fontsize=10)
ax1.set_title('1. Elbow Method for Optimal K', fontsize=12, fontweight='bold')
ax1.grid(True, alpha=0.3)
ax1.axvline(x=5, color='red', linestyle='--', label='Optimal K=5')
ax1.legend()

# Plot 2: Silhouette Scores
ax2 = plt.subplot(3, 3, 2)
ax2.plot(K_range, silhouette_scores, 'go-', linewidth=2, markersize=8)
ax2.set_xlabel('Number of Clusters (K)', fontsize=10)
ax2.set_ylabel('Silhouette Score', fontsize=10)
ax2.set_title('2. Silhouette Analysis', fontsize=12, fontweight='bold')
ax2.grid(True, alpha=0.3)
ax2.axvline(x=optimal_k, color='red', linestyle='--', label=f'Optimal K={optimal_k}')
ax2.legend()

# Plot 3: 2D Clustering (Income vs Spending)
ax3 = plt.subplot(3, 3, 3)
scatter = ax3.scatter(df['Annual_Income'], df['Spending_Score'], 
                     c=df['Cluster'], cmap='viridis', s=100, alpha=0.6, edgecolors='black')
centers_2d = cluster_centers_original[:, [1, 2]]  # Income and Spending columns
ax3.scatter(centers_2d[:, 0], centers_2d[:, 1], c='red', s=300, alpha=0.8, 
           marker='X', edgecolors='black', linewidths=2, label='Centroids')
ax3.set_xlabel('Annual Income (k$)', fontsize=10)
ax3.set_ylabel('Spending Score (1-100)', fontsize=10)
ax3.set_title('3. Customer Segments (Income vs Spending)', fontsize=12, fontweight='bold')
ax3.legend()
ax3.grid(True, alpha=0.3)
plt.colorbar(scatter, ax=ax3, label='Cluster')

# Plot 4: 2D Clustering (Age vs Income)
ax4 = plt.subplot(3, 3, 4)
scatter = ax4.scatter(df['Age'], df['Annual_Income'], 
                     c=df['Cluster'], cmap='viridis', s=100, alpha=0.6, edgecolors='black')
centers_2d_age = cluster_centers_original[:, [0, 1]]  # Age and Income columns
ax4.scatter(centers_2d_age[:, 0], centers_2d_age[:, 1], c='red', s=300, alpha=0.8,
           marker='X', edgecolors='black', linewidths=2, label='Centroids')
ax4.set_xlabel('Age', fontsize=10)
ax4.set_ylabel('Annual Income (k$)', fontsize=10)
ax4.set_title('4. Customer Segments (Age vs Income)', fontsize=12, fontweight='bold')
ax4.legend()
ax4.grid(True, alpha=0.3)
plt.colorbar(scatter, ax=ax4, label='Cluster')

# Plot 5: 2D Clustering (Age vs Spending)
ax5 = plt.subplot(3, 3, 5)
scatter = ax5.scatter(df['Age'], df['Spending_Score'], 
                     c=df['Cluster'], cmap='viridis', s=100, alpha=0.6, edgecolors='black')
centers_2d_age_spend = cluster_centers_original[:, [0, 2]]  # Age and Spending columns
ax5.scatter(centers_2d_age_spend[:, 0], centers_2d_age_spend[:, 1], c='red', s=300, alpha=0.8,
           marker='X', edgecolors='black', linewidths=2, label='Centroids')
ax5.set_xlabel('Age', fontsize=10)
ax5.set_ylabel('Spending Score (1-100)', fontsize=10)
ax5.set_title('5. Customer Segments (Age vs Spending)', fontsize=12, fontweight='bold')
ax5.legend()
ax5.grid(True, alpha=0.3)
plt.colorbar(scatter, ax=ax5, label='Cluster')

# Plot 6: PCA Visualization
ax6 = plt.subplot(3, 3, 6)
scatter = ax6.scatter(df['PCA1'], df['PCA2'], c=df['Cluster'], 
                     cmap='viridis', s=100, alpha=0.6, edgecolors='black')
pca_centers = pca.transform(kmeans_final.cluster_centers_)
ax6.scatter(pca_centers[:, 0], pca_centers[:, 1], c='red', s=300, alpha=0.8,
           marker='X', edgecolors='black', linewidths=2, label='Centroids')
ax6.set_xlabel(f'PC1 ({pca.explained_variance_ratio_[0]*100:.1f}% variance)', fontsize=10)
ax6.set_ylabel(f'PC2 ({pca.explained_variance_ratio_[1]*100:.1f}% variance)', fontsize=10)
ax6.set_title('6. PCA Projection of Clusters', fontsize=12, fontweight='bold')
ax6.legend()
ax6.grid(True, alpha=0.3)
plt.colorbar(scatter, ax=ax6, label='Cluster')

# Plot 7: Cluster Size Distribution
ax7 = plt.subplot(3, 3, 7)
cluster_counts = df['Cluster'].value_counts().sort_index()
bars = ax7.bar(cluster_counts.index, cluster_counts.values, color='skyblue', edgecolor='black')
for i, bar in enumerate(bars):
    height = bar.get_height()
    ax7.text(bar.get_x() + bar.get_width()/2., height,
             f'{int(height)}\n({height/len(df)*100:.1f}%)',
             ha='center', va='bottom', fontsize=9)
ax7.set_xlabel('Cluster', fontsize=10)
ax7.set_ylabel('Number of Customers', fontsize=10)
ax7.set_title('7. Cluster Size Distribution', fontsize=12, fontweight='bold')
ax7.grid(axis='y', alpha=0.3)

# Plot 8: Cluster Characteristics - Radar Chart
ax8 = plt.subplot(3, 3, 8, projection='polar')
categories = ['Age', 'Income', 'Spending']
angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
angles += angles[:1]

for i in range(final_k):
    cluster_data = df[df['Cluster'] == i]
    values = [
        cluster_data['Age'].mean() / df['Age'].max(),
        cluster_data['Annual_Income'].mean() / df['Annual_Income'].max(),
        cluster_data['Spending_Score'].mean() / df['Spending_Score'].max()
    ]
    values += values[:1]
    ax8.plot(angles, values, 'o-', linewidth=2, label=f'Cluster {i}')
    ax8.fill(angles, values, alpha=0.15)

ax8.set_xticks(angles[:-1])
ax8.set_xticklabels(categories)
ax8.set_ylim(0, 1)
ax8.set_title('8. Cluster Characteristics (Normalized)', fontsize=12, fontweight='bold', pad=20)
ax8.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))
ax8.grid(True)

# Plot 9: Box Plot - Spending Score by Cluster
ax9 = plt.subplot(3, 3, 9)
df.boxplot(column='Spending_Score', by='Cluster', ax=ax9)
ax9.set_xlabel('Cluster', fontsize=10)
ax9.set_ylabel('Spending Score', fontsize=10)
ax9.set_title('9. Spending Score Distribution by Cluster', fontsize=12, fontweight='bold')
plt.sca(ax9)
ax9.get_figure().suptitle('')

plt.tight_layout()
plt.savefig('kmeans_clustering_comprehensive_analysis.png', dpi=300, bbox_inches='tight')
plt.show()

# ==================== BUSINESS RECOMMENDATIONS ====================
print("\n11. STRATEGIC BUSINESS RECOMMENDATIONS")
print("-" * 100)

for i in range(final_k):
    cluster_data = df[df['Cluster'] == i]
    print(f"\nCluster {i}: {cluster_labels[i]}")
    print(f"  Size: {len(cluster_data)} customers ({len(cluster_data)/len(df)*100:.1f}%)")
    print(f"  Average Age: {cluster_data['Age'].mean():.1f} years")
    print(f"  Average Income: ${cluster_data['Annual_Income'].mean():.2f}k")
    print(f"  Average Spending Score: {cluster_data['Spending_Score'].mean():.1f}/100")
    
    # Business recommendations
    if cluster_labels[i] == "Premium Customers":
        print("  → Strategy: VIP programs, luxury product lines, personalized service")
    elif cluster_labels[i] == "Spenders - Low Income":
        print("  → Strategy: Financing options, loyalty rewards, targeted promotions")
    elif cluster_labels[i] == "High Earners - Conservative":
        print("  → Strategy: Investment products, quality assurance, exclusive previews")
    elif cluster_labels[i] == "Budget Conscious":
        print("  → Strategy: Discount programs, value bundles, basic product lines")
    else:
        print("  → Strategy: Balanced approach, mid-range products, seasonal offers")

print("\n" + "=" * 100)
print("K-MEANS CLUSTERING ANALYSIS COMPLETE")
print("=" * 100)
print("\nVisualization saved as 'kmeans_clustering_comprehensive_analysis.png'")
print("\nKey Insights:")
print("  • Optimal number of clusters determined through Elbow Method and Silhouette Analysis")
print("  • Customer segmentation reveals distinct behavioral patterns")
print("  • Actionable business strategies developed for each customer segment")
print("  • Multi-dimensional analysis provides comprehensive view of customer base")
